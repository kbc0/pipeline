pipeline {
    agent any

    tools {
        maven 'Maven3'      // Global Tool Configuration'daki isim
        jdk   'Java'        // Eğer tanımlıysa
    }

    environment {
        JENKINS_URL = "${BUILD_URL}"  // Job URL'si otomatik atanır
    }

    stages {

        stage('Build + Test + Sonar') {
            steps {
                dir('java-app') {
                    withMaven(maven: 'Maven3') {

                        // Derleme ve test
                        sh 'mvn clean test'

                        // SonarQube analiz + Jenkins URL bağlantısı
                        withSonarQubeEnv('SonarQubeServer') {
                            sh """
                                mvn sonar:sonar \
                                  -Dsonar.projectKey=java-app \
                                  -Dsonar.projectName='Java App' \
                                  -Dsonar.links.ci=${JENKINS_URL}
                            """
                        }
                    }
                }
            }
            post {
                always {
                    // Test raporu (JUnit)
                    junit 'java-app/target/surefire-reports/*.xml'

                    // Coverage raporu (varsayım: JaCoCo yüklü)
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'java-app/target/site/jacoco',
                        reportFiles: 'index.html',
                        reportName: 'JaCoCo Coverage Report'
                    ])
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 3, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Quality gate failed: ${qg.status}"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
